"""
Django settings for tenantisolation project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import sys
import os
from . import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.append(BASE_DIR + "/apps")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.DEBUG

GDAL_LIBRARY_PATH = "C:\\LIBRARIES\\OSGeo4W\\bin\\gdal307.dll"
GEOS_LIBRARY_PATH = "C:\\LIBRARIES\\OSGeo4W\\bin\\geos_c.dll"

ALLOWED_HOSTS = config.ALLOWED_HOSTS
CORS_ORIGIN_WHITELIST = config.CORS_ORIGIN_WHITELIST
CORS_ORIGIN_REGEX_WHITELIST = config.CORS_ORIGIN_REGEX_WHITELIST
CORS_ORIGIN_ALLOW_ALL = config.CORS_ORIGIN_ALLOW_ALL

CSRF_TRUSTED_ORIGINS = config.CSRF_TRUSTED_ORIGINS
CSRF_COOKIE_SECURE = config.CSRF_COOKIE_SECURE
CSRF_USE_SESSIONS = config.CSRF_USE_SESSIONS

SESSION_ENGINE = config.SESSION_ENGINE
SESSION_CACHE_ALIAS = config.SESSION_CACHE_ALIAS
SESSION_COOKIE_SECURE = config.SESSION_COOKIE_SECURE
SESSION_COOKIE_NAME = config.SESSION_COOKIE_NAME

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    "django.contrib.sites",
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "dal",
    "dal_select2",
    'django.contrib.admin',
    "constance",
    # django apps
    'core',
    "native_account",
    "company",
    'tenant',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "tenantisolation.middleware.LoggingMiddleware",
]

ROOT_URLCONF = 'tenantisolation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "core.context_processors.user_info",
                "core.context_processors.account_info",
            ],
        },
    },
]

WSGI_APPLICATION = 'tenantisolation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": config.POSTGRES_DB,
        "USER": config.POSTGRES_USER,
        "PASSWORD": config.POSTGRES_PASSWORD,
        "HOST": config.POSTGRES_SERVER,
        "PORT": config.POSTGRES_PORT,
        # 'CONN_MAX_AGE': 5,
        # 'CONN_MAX_AGE': config.POSTGRES_CONN_MAX_AGE,
        "DISABLE_SERVER_SIDE_CURSORS": True,
        # 'ATOMIC_REQUESTS': False,
        "OPTIONS": {"connect_timeout": 30},
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
LOCALE_PATHS = (os.path.join(BASE_DIR, "locale/"),)


CONSTANCE_BACKEND = "constance.backends.redisd.RedisBackend"
CONSTANCE_REDIS_CONNECTION = {
    "host": config.REDIS_SERVER,
    "port": config.REDIS_PORT,
    "db": config.REDIS_DB,
    "password": config.REDIS_PASSWORD,
}
from tenantisolation.constance_config import *


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


if config.CACHE_BACKEND == "redis":
    CACHES = {
        "default": {
            "BACKEND": config.REDIS_BACKEND,
            "LOCATION": f"redis://{config.REDIS_SERVER}:{config.REDIS_PORT}/{config.REDIS_DB}",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": f"{config.REDIS_PASSWORD}",
                "SOCKET_CONNECT_TIMEOUT": int(
                    config.REDIS_CONNECT_TIMEOUT
                ),  # in seconds
                "SOCKET_TIMEOUT": int(config.REDIS_SOCKET_TIMEOUT),  # in seconds
            },
        }
    }


if config.SHOW_DJANGO_LOG:
    import logging.config

    LOGGING_CONFIG = None

    # Get loglevel from env
    LOGLEVEL = os.getenv("DJANGO_LOGLEVEL", "info").upper()

    logging.config.dictConfig(
        {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "console": {
                    "format": "%(asctime)s %(levelname)s %(message)s",
                },
            },
            "handlers": {
                "console": {
                    "class": "logging.StreamHandler",
                    "formatter": "console",
                },
            },
            "loggers": {
                "": {
                    "level": LOGLEVEL,
                    "handlers": [
                        "console",
                    ],
                },
                "elasticapm": {
                    "handlers": ["console"],
                    "level": "INFO",
                    "propagate": False,
                },
            },
        }
    )